{"ast":null,"code":"var _jsxFileName = \"D:\\\\code\\\\hunter v1\\\\10\\\\frontend\\\\src\\\\contexts\\\\NotificationContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationContext = /*#__PURE__*/createContext();\nexport const useNotification = () => {\n  _s();\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n_s(useNotification, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const NotificationProvider = ({\n  children\n}) => {\n  _s2();\n  const [notifications, setNotifications] = useState([]);\n  const showNotification = (message, type = 'success', duration = 4000) => {\n    const id = Date.now() + Math.random();\n    const notification = {\n      id,\n      message,\n      type,\n      // success, error, warning, info\n      duration\n    };\n    setNotifications(prev => [...prev, notification]);\n\n    // Auto remove after duration\n    if (duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, duration);\n    }\n    return id;\n  };\n  const removeNotification = id => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n  const value = {\n    notifications,\n    showNotification,\n    removeNotification,\n    clearAllNotifications\n  };\n  return /*#__PURE__*/_jsxDEV(NotificationContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s2(NotificationProvider, \"/HH3zTd3BUNOgnlhD79kguSWbWM=\");\n_c = NotificationProvider;\nvar _c;\n$RefreshReg$(_c, \"NotificationProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","jsxDEV","_jsxDEV","NotificationContext","useNotification","_s","context","Error","NotificationProvider","children","_s2","notifications","setNotifications","showNotification","message","type","duration","id","Date","now","Math","random","notification","prev","setTimeout","removeNotification","filter","clearAllNotifications","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/code/hunter v1/10/frontend/src/contexts/NotificationContext.js"],"sourcesContent":["import React, { createContext, useContext, useState } from 'react';\n\nconst NotificationContext = createContext();\n\nexport const useNotification = () => {\n  const context = useContext(NotificationContext);\n  if (!context) {\n    throw new Error('useNotification must be used within a NotificationProvider');\n  }\n  return context;\n};\n\nexport const NotificationProvider = ({ children }) => {\n  const [notifications, setNotifications] = useState([]);\n\n  const showNotification = (message, type = 'success', duration = 4000) => {\n    const id = Date.now() + Math.random();\n    const notification = {\n      id,\n      message,\n      type, // success, error, warning, info\n      duration\n    };\n\n    setNotifications(prev => [...prev, notification]);\n\n    // Auto remove after duration\n    if (duration > 0) {\n      setTimeout(() => {\n        removeNotification(id);\n      }, duration);\n    }\n\n    return id;\n  };\n\n  const removeNotification = (id) => {\n    setNotifications(prev => prev.filter(notification => notification.id !== id));\n  };\n\n  const clearAllNotifications = () => {\n    setNotifications([]);\n  };\n\n  const value = {\n    notifications,\n    showNotification,\n    removeNotification,\n    clearAllNotifications\n  };\n\n  return (\n    <NotificationContext.Provider value={value}>\n      {children}\n    </NotificationContext.Provider>\n  );\n};\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnE,MAAMC,mBAAmB,gBAAGL,aAAa,CAAC,CAAC;AAE3C,OAAO,MAAMM,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnC,MAAMC,OAAO,GAAGP,UAAU,CAACI,mBAAmB,CAAC;EAC/C,IAAI,CAACG,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,4DAA4D,CAAC;EAC/E;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,eAAe;AAQ5B,OAAO,MAAMI,oBAAoB,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACpD,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAEtD,MAAMa,gBAAgB,GAAGA,CAACC,OAAO,EAAEC,IAAI,GAAG,SAAS,EAAEC,QAAQ,GAAG,IAAI,KAAK;IACvE,MAAMC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,GAAGC,IAAI,CAACC,MAAM,CAAC,CAAC;IACrC,MAAMC,YAAY,GAAG;MACnBL,EAAE;MACFH,OAAO;MACPC,IAAI;MAAE;MACNC;IACF,CAAC;IAEDJ,gBAAgB,CAACW,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAED,YAAY,CAAC,CAAC;;IAEjD;IACA,IAAIN,QAAQ,GAAG,CAAC,EAAE;MAChBQ,UAAU,CAAC,MAAM;QACfC,kBAAkB,CAACR,EAAE,CAAC;MACxB,CAAC,EAAED,QAAQ,CAAC;IACd;IAEA,OAAOC,EAAE;EACX,CAAC;EAED,MAAMQ,kBAAkB,GAAIR,EAAE,IAAK;IACjCL,gBAAgB,CAACW,IAAI,IAAIA,IAAI,CAACG,MAAM,CAACJ,YAAY,IAAIA,YAAY,CAACL,EAAE,KAAKA,EAAE,CAAC,CAAC;EAC/E,CAAC;EAED,MAAMU,qBAAqB,GAAGA,CAAA,KAAM;IAClCf,gBAAgB,CAAC,EAAE,CAAC;EACtB,CAAC;EAED,MAAMgB,KAAK,GAAG;IACZjB,aAAa;IACbE,gBAAgB;IAChBY,kBAAkB;IAClBE;EACF,CAAC;EAED,oBACEzB,OAAA,CAACC,mBAAmB,CAAC0B,QAAQ;IAACD,KAAK,EAAEA,KAAM;IAAAnB,QAAA,EACxCA;EAAQ;IAAAqB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACmB,CAAC;AAEnC,CAAC;AAACvB,GAAA,CA5CWF,oBAAoB;AAAA0B,EAAA,GAApB1B,oBAAoB;AAAA,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}