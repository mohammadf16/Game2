# Generated by Django 4.2.7 on 2025-08-08 18:29

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField()),
                ('icon', models.CharField(max_length=50)),
                ('category', models.CharField(choices=[('gameplay', 'Gameplay'), ('social', 'Social'), ('skill', 'Skill'), ('milestone', 'Milestone'), ('special', 'Special')], max_length=20)),
                ('requirement_type', models.CharField(choices=[('count', 'Count (reach X number)'), ('streak', 'Streak (X in a row)'), ('percentage', 'Percentage (X% success rate)'), ('single_game', 'Single Game Achievement'), ('special_condition', 'Special Condition')], max_length=20)),
                ('requirement_value', models.IntegerField()),
                ('requirement_description', models.CharField(max_length=200)),
                ('points_reward', models.IntegerField(default=0)),
                ('badge_reward', models.CharField(blank=True, max_length=50, null=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_hidden', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'requirement_value'],
            },
        ),
        migrations.CreateModel(
            name='DecoyQuestion',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The decoy question text')),
                ('min_answer', models.IntegerField(default=1)),
                ('max_answer', models.IntegerField(default=20)),
                ('is_active', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='GameRoom',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100)),
                ('description', models.TextField(blank=True, max_length=500, null=True)),
                ('is_private', models.BooleanField(default=False)),
                ('room_code', models.CharField(blank=True, max_length=6, unique=True)),
                ('password', models.CharField(blank=True, max_length=50, null=True)),
                ('max_players', models.IntegerField(default=8, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(12)])),
                ('min_players', models.IntegerField(default=3, validators=[django.core.validators.MinValueValidator(3)])),
                ('total_rounds', models.IntegerField(default=5, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(20)])),
                ('difficulty_level', models.CharField(choices=[('easy', 'Easy (1-2)'), ('medium', 'Medium (2-3)'), ('hard', 'Hard (3-4)'), ('expert', 'Expert (4-5)'), ('mixed', 'Mixed Difficulty')], default='mixed', max_length=20)),
                ('category_preference', models.CharField(blank=True, max_length=20, null=True)),
                ('auto_start', models.BooleanField(default=False)),
                ('allow_rejoining', models.BooleanField(default=True)),
                ('spectators_allowed', models.BooleanField(default=False)),
                ('discussion_time', models.IntegerField(default=180, help_text='Discussion time in seconds')),
                ('voting_time', models.IntegerField(default=60, help_text='Voting time in seconds')),
                ('results_time', models.IntegerField(default=30, help_text='Results display time in seconds')),
                ('status', models.CharField(choices=[('waiting', 'Waiting for Players'), ('in_progress', 'Game in Progress'), ('finished', 'Game Finished'), ('paused', 'Game Paused'), ('cancelled', 'Game Cancelled')], default='waiting', max_length=20)),
                ('current_round', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('last_activity', models.DateTimeField(auto_now=True)),
                ('host', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='hosted_games', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Player',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nickname', models.CharField(max_length=50)),
                ('score', models.IntegerField(default=0)),
                ('is_connected', models.BooleanField(default=True)),
                ('is_ready', models.BooleanField(default=False)),
                ('is_host', models.BooleanField(default=False)),
                ('rounds_won', models.IntegerField(default=0)),
                ('rounds_as_imposter', models.IntegerField(default=0)),
                ('rounds_as_detective', models.IntegerField(default=0)),
                ('correct_votes_session', models.IntegerField(default=0)),
                ('total_votes_session', models.IntegerField(default=0)),
                ('joined_at', models.DateTimeField(auto_now_add=True)),
                ('last_seen', models.DateTimeField(auto_now=True)),
                ('connection_id', models.CharField(blank=True, max_length=100, null=True)),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='players', to='game.gameroom')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-score', '-joined_at'],
                'unique_together': {('user', 'room')},
            },
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('text', models.TextField(help_text='The main question text')),
                ('category', models.CharField(choices=[('lifestyle', 'Lifestyle & Habits'), ('preferences', 'Preferences & Opinions'), ('experiences', 'Experiences'), ('hypothetical', 'Hypothetical'), ('general', 'General')], default='general', max_length=20)),
                ('min_answer', models.IntegerField(default=1, help_text='Minimum expected answer')),
                ('max_answer', models.IntegerField(default=20, help_text='Maximum expected answer')),
                ('difficulty', models.IntegerField(choices=[(1, 'Easy'), (2, 'Medium'), (3, 'Hard')], default=1)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ['category', 'difficulty'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('avatar', models.CharField(choices=[('detective_1', 'üïµÔ∏è Detective Classic'), ('detective_2', 'üë®\u200düíº Business Detective'), ('detective_3', 'üë©\u200düíº Lady Detective'), ('spy_1', 'üï¥Ô∏è Secret Agent'), ('spy_2', 'üë§ Mysterious Figure'), ('ninja_1', 'ü•∑ Ninja'), ('robot_1', 'ü§ñ Android'), ('alien_1', 'üëΩ Alien'), ('ghost_1', 'üëª Ghost'), ('wizard_1', 'üßô\u200d‚ôÇÔ∏è Wizard'), ('witch_1', 'üßô\u200d‚ôÄÔ∏è Witch'), ('pirate_1', 'üè¥\u200d‚ò†Ô∏è Pirate'), ('superhero_1', 'ü¶∏\u200d‚ôÇÔ∏è Hero'), ('superhero_2', 'ü¶∏\u200d‚ôÄÔ∏è Heroine'), ('vampire_1', 'üßõ\u200d‚ôÇÔ∏è Vampire')], default='detective_1', max_length=20)),
                ('gender', models.CharField(choices=[('male', 'Male'), ('female', 'Female'), ('non_binary', 'Non-binary'), ('prefer_not_say', 'Prefer not to say')], default='prefer_not_say', max_length=15)),
                ('bio', models.TextField(blank=True, max_length=500, null=True)),
                ('total_games', models.IntegerField(default=0)),
                ('total_wins', models.IntegerField(default=0)),
                ('total_imposter_wins', models.IntegerField(default=0)),
                ('total_detective_wins', models.IntegerField(default=0)),
                ('total_score', models.IntegerField(default=0)),
                ('win_rate', models.FloatField(default=0.0)),
                ('imposter_win_rate', models.FloatField(default=0.0)),
                ('detective_win_rate', models.FloatField(default=0.0)),
                ('average_score_per_game', models.FloatField(default=0.0)),
                ('total_playtime_minutes', models.IntegerField(default=0)),
                ('games_hosted', models.IntegerField(default=0)),
                ('consecutive_wins', models.IntegerField(default=0)),
                ('best_win_streak', models.IntegerField(default=0)),
                ('preferred_category', models.CharField(blank=True, max_length=20, null=True)),
                ('preferred_difficulty', models.FloatField(default=2.5, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(5.0)])),
                ('preferred_game_size', models.IntegerField(default=6, validators=[django.core.validators.MinValueValidator(3), django.core.validators.MaxValueValidator(12)])),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('last_active', models.DateTimeField(auto_now=True)),
                ('last_game_played', models.DateTimeField(blank=True, null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['-total_score', '-win_rate'],
            },
        ),
        migrations.CreateModel(
            name='GameRound',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('round_number', models.IntegerField()),
                ('status', models.CharField(choices=[('setup', 'Setting Up'), ('answering', 'Players Answering'), ('discussion', 'Discussion Phase'), ('voting', 'Voting Phase'), ('results', 'Results Phase'), ('finished', 'Round Finished')], default='setup', max_length=20)),
                ('started_at', models.DateTimeField(auto_now_add=True)),
                ('discussion_started_at', models.DateTimeField(blank=True, null=True)),
                ('voting_started_at', models.DateTimeField(blank=True, null=True)),
                ('finished_at', models.DateTimeField(blank=True, null=True)),
                ('decoy_question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.decoyquestion')),
                ('imposter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='imposter_rounds', to='game.player')),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.question')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rounds', to='game.gameroom')),
            ],
            options={
                'unique_together': {('room', 'round_number')},
            },
        ),
        migrations.CreateModel(
            name='GameEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('player_joined', 'Player Joined'), ('player_left', 'Player Left'), ('game_started', 'Game Started'), ('round_started', 'Round Started'), ('answer_submitted', 'Answer Submitted'), ('discussion_started', 'Discussion Started'), ('voting_started', 'Voting Started'), ('vote_submitted', 'Vote Submitted'), ('round_ended', 'Round Ended'), ('game_ended', 'Game Ended')], max_length=20)),
                ('data', models.JSONField(blank=True, default=dict)),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='game.player')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='events', to='game.gameroom')),
            ],
            options={
                'ordering': ['-timestamp'],
            },
        ),
        migrations.CreateModel(
            name='Vote',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('accused', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_received', to='game.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='game.gameround')),
                ('voter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_cast', to='game.player')),
            ],
            options={
                'unique_together': {('round', 'voter')},
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('progress_value', models.IntegerField(default=0)),
                ('is_completed', models.BooleanField(default=False)),
                ('earned_at', models.DateTimeField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='achievements', to='game.userprofile')),
            ],
            options={
                'ordering': ['-earned_at', '-created_at'],
                'unique_together': {('user', 'achievement')},
            },
        ),
        migrations.CreateModel(
            name='PlayerAnswer',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer', models.IntegerField()),
                ('submitted_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='game.player')),
                ('round', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='answers', to='game.gameround')),
            ],
            options={
                'unique_together': {('round', 'player')},
            },
        ),
        migrations.CreateModel(
            name='GameHistory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(choices=[('detective', 'Detective'), ('imposter', 'Imposter')], max_length=20)),
                ('won', models.BooleanField(default=False)),
                ('points_earned', models.IntegerField(default=0)),
                ('performance_score', models.FloatField(default=0.0)),
                ('total_rounds', models.IntegerField(default=0)),
                ('rounds_as_imposter', models.IntegerField(default=0)),
                ('rounds_as_detective', models.IntegerField(default=0)),
                ('correct_votes', models.IntegerField(default=0)),
                ('total_votes', models.IntegerField(default=0)),
                ('game_duration_minutes', models.IntegerField(default=0)),
                ('player_count', models.IntegerField(default=0)),
                ('played_at', models.DateTimeField(auto_now_add=True)),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='game_history', to='game.userprofile')),
                ('room', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='player_histories', to='game.gameroom')),
            ],
            options={
                'ordering': ['-played_at'],
                'unique_together': {('player', 'room')},
            },
        ),
    ]
